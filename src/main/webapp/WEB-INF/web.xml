<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

    <display-name>Archetype Created Web Application By LBYX</display-name>

    <!--
            1
    -->

    <!-- ============================  全局范围内环境参数初始化  ============================ -->
    <context-param> <!--  指定 Spring.xml 配置文件的路径  -->
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring/ApplicationContext.xml</param-value>
    </context-param>
    <context-param> <!--  指定日志参数配置文件的路径  -->
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>


    <!-- ============================  过滤器配置  ============================ -->
    <!--  解决乱码的过滤器  -->
    <filter>
        <filter-name>encodingFilter</filter-name>   <!--指定filter的名字-->
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>   <!--  参数名称 -->
            <param-value>UTF-8</param-value>    <!--  参数值   -->
        </init-param>
    </filter>
    <filter-mapping>  <!--   用来定义 filter 所对应的 URL   -->
        <filter-name>encodingFilter</filter-name>     <!--  指定对应 filter 的名字    -->
        <url-pattern>/*</url-pattern>                 <!--  指定 filter 所对应的 URL  -->
    </filter-mapping>


    <!--  ============================  监听器配置  ============================  -->
    <!--  ContextLoaderListener 实现了 ServletContextListener 这个接口  -->
    <!--  目的就是将 Spring 加载进 WebApp 里面去，将对象的创建托管给 Spring  -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <listener> <!--  防止 Spring 内存溢出监听器  -->
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>


    <!--  ============================  servlet配置  ============================  -->
    <!--  针对 SpringMVC 的配置, DispatcherServlet 前端控制器本质上一个 servlet  -->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>      <!--参数名称-->
            <!--  指定 SpringMVC-config.xml 配置文件的路径   -->
            <param-value>classpath:spring/ApplicationContext-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>    <!-- 当值为正数或零时：Servlet容器先加载数值小的servlet，再依次加载其他数值大的servlet.-->
        <async-supported>true</async-supported> <!-- 设置是否启用异步支持-->
    </servlet>
    <servlet-mapping><!--  用来定义 SpringMVC 这个 servlet 组件所对应的 URL 地址  -->
        <servlet-name>SpringMVC</servlet-name>  <!--  指定 servlet 的名称  -->
        <!--  此处可以可以配置成*.do，对应 struts 的后缀习惯  -->
        <!--  这里使用 / 是为了 使用 restful 风格！ 但是 restful 风格需要对静态资源进行访问配置  -->
        <url-pattern>/</url-pattern>            <!--  指定 servlet 所对应的 URL  -->
    </servlet-mapping>


    <!--  ============================  会话超时配置（单位为分钟）  ============================  -->
    <session-config><!--  如果某个会话在一定时间未被访问，则服务器可以扔掉以节约内存  -->
        <session-timeout>30</session-timeout>
    </session-config>


    <!--  ============================  欢迎页面配置  ============================  -->
    <welcome-file-list><!--定义首页列单.-->
        <welcome-file>/index.jsp</welcome-file> <!--用来指定首页文件名称.我们可以用<welcome-file>指定几个首页,而服务器会依照设定的顺序来找首页.-->
        <!--<welcome-file>/index.html</welcome-file>-->
    </welcome-file-list>


    <!--  ============================  配置错误页面  ============================  -->
    <error-page>  <!--将错误代码(Error Code)或异常(Exception)的种类对应到web应用资源路径.-->
        <error-code>404</error-code>        <!-- HTTP Error code,例如: 404、403  -->
        <location>/404.jsp</location>     <!-- 用来设置发生错误或异常时要显示的页面  -->
    </error-page>
    <error-page>
        <exception-type>java.lang.Exception</exception-type><!-- 设置可能会发生的java异常类型,例如:java.lang.Exception-->
        <location>/ExceptionError.jsp</location>   <!-- 用来设置发生错误或异常时要显示的页面-->
    </error-page>

</web-app>
